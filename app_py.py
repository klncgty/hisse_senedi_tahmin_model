# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R-bZ0rAf1WIKi_NbyLxos3H-YjUCBb9t
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from sklearn.preprocessing import MinMaxScaler
import torch
import torch.nn as nn

symbol = "ANHYT.IS"

class AdvancedLSTM(nn.Module):
    def __init__(self, input_size=2, hidden_layer_size=100, output_size=2, num_layers=2, dropout_prob=0.2):
        super(AdvancedLSTM, self).__init__()
        self.hidden_layer_size = hidden_layer_size
        self.num_layers = num_layers
        self.lstm = nn.LSTM(input_size, hidden_layer_size, num_layers, dropout=dropout_prob, batch_first=True)
        self.linear = nn.Linear(hidden_layer_size, output_size)
        self.hidden_cell = (torch.zeros(self.num_layers, 1, self.hidden_layer_size),
                            torch.zeros(self.num_layers, 1, self.hidden_layer_size))

    def forward(self, input_seq):
        lstm_out, self.hidden_cell = self.lstm(input_seq.view(len(input_seq), 1, -1), self.hidden_cell)
        predictions = self.linear(lstm_out.view(len(input_seq), -1))
        return predictions[-1]

def load_model():
    model = AdvancedLSTM()
    model.load_state_dict(torch.load('model.pth'))
    model.eval()
    return model

def get_data():
    end_date = datetime.now()
    start_date = end_date - timedelta(days=4*365)  # Son 4 yıl
    data = yf.download(symbol, start=start_date, end=end_date)
    data = data[['Open', 'Close']]
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)
    return data, scaled_data, scaler

def predict_future_days(model, scaled_data, scaler, days=5, time_step=10):
    test_inputs = scaled_data[-time_step:].tolist()
    for _ in range(days):
        seq = torch.FloatTensor(test_inputs[-time_step:])
        with torch.no_grad():
            model.hidden_cell = (torch.zeros(model.num_layers, 1, model.hidden_layer_size),
                            torch.zeros(model.num_layers, 1, model.hidden_layer_size))
            test_inputs.append(model(seq).numpy())
    predictions = scaler.inverse_transform(test_inputs[time_step:])
    return predictions

st.title('ANHYT Hisse Senedi Tahmin Uygulaması')
days = st.number_input('Kaç günlük tahmin yapmak istersiniz?', min_value=1, max_value=30, value=5, step=1)

if st.button('Tahmin Yap'):
    model = load_model()
    data, scaled_data, scaler = get_data()
    predictions = predict_future_days(model, scaled_data, scaler, days)

    st.write(f"Gelecek {days} günün tahminleri:")
    results = pd.DataFrame(predictions, columns=['Open', 'Close'])
    st.write(results)

    st.line_chart(results)